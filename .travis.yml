branches:
  only:
    # This is where pull requests from "bors r+" are built.
    - staging
    # This is where pull requests from "bors try" are built.
    - trying
    # Not really necessary, just to get a green badge on “master”
    - master
language: rust

matrix:
  include:
    - os: linux
      dist: focal
      addons:
        apt:
          sources:
            - sourceline: 'deb https://download.01.org/intel-sgx/sgx_repo/ubuntu focal main'
              key_url: 'https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key'
            - sourceline: "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
          packages:
            - faketime
            - protobuf-compiler
            - libsgx-dcap-ql-dev
            - clang-11
            - musl-tools
      rust:
        - stable
      env:
        - RUST_BACKTRACE=1
        - CFLAGS_x86_64_fortanix_unknown_sgx="-isystem/usr/include/x86_64-linux-gnu -mlvi-hardening -mllvm -x86-experimental-lvi-inline-asm-hardening"
        - CC_x86_64_fortanix_unknown_sgx=clang-11
      before_script:
        # Travis-CI supplies clang version 16 by itself, in /usr/local
        # However, our current build fails if llvm-16 is also available in the system. This is likely a bug,
        # created and reported here: https://github.com/fortanix/rust-sgx/issues/465
        # Once this bug is solved, please feel free to remove this workaround.
        #
        # Note that this clang-16 is some Travis-CI magic and not a standard Debian/Ubuntu Apt package.
        # We're thus forced to force-remove the underlying directory in /usr/local
        - sudo rm -rf /usr/local/*clang*
        - rustup target add x86_64-fortanix-unknown-sgx x86_64-unknown-linux-musl
        - rustup toolchain add nightly
        - rustup target add x86_64-fortanix-unknown-sgx --toolchain nightly
      script:
        - cargo test --verbose --locked --all --exclude sgxs-loaders --exclude async-usercalls && [ "$(echo $(nm -D target/debug/sgx-detect|grep __vdso_sgx_enter_enclave))" = "w __vdso_sgx_enter_enclave" ]
        - cargo test --verbose --locked -p async-usercalls --target x86_64-fortanix-unknown-sgx --no-run
        - cargo test --verbose --locked -p dcap-ql --features link
        - cargo test --verbose --locked -p dcap-ql --features verify
        - cargo test --verbose --locked -p ias --features mbedtls
        - cargo test --verbose --locked -p ias --features client,mbedtls
        # uses backtrace, which still requires nightly on SGX
        - cargo +nightly build --verbose --locked -p aesm-client --target=x86_64-fortanix-unknown-sgx
        # uses sgxstd feature
        - cargo +nightly build --verbose --locked -p aesm-client --target=x86_64-fortanix-unknown-sgx --features sgx-isa/sgxstd
        - cargo +nightly test --verbose --locked -p sgx-isa --features sgxstd --target x86_64-fortanix-unknown-sgx --no-run
        # Unfortunately running `faketime '2021-09-10 11:00:00 GMT' cargo test -p nitro-attestation-verify` causes a segmentation
        #  fault while compiling. We only execute `faketime` during the tests
        #- cargo test --locked -p nitro-attestation-verify --no-run && faketime '2021-09-08 11:00:00 GMT' cargo test --locked -p nitro-attestation-verify --lib
        - cargo test --locked -p nitro-attestation-verify --no-run && faketime '2021-09-10 11:00:00 GMT' cargo test --locked -p nitro-attestation-verify --lib
        # NOTE: linking glibc version of OpenSSL with musl binary.
        # Unlikely to produce a working binary, but at least the build succeeds.
        - mkdir -p /tmp/muslinclude && ln -sf /usr/include/x86_64-linux-gnu/openssl /tmp/muslinclude/openssl && PKG_CONFIG_ALLOW_CROSS=1 CFLAGS=-I/tmp/muslinclude cargo build --locked -p fortanix-sgx-tools --target x86_64-unknown-linux-musl
        - cargo build --verbose --locked -p em-app -p get-certificate -p harmonize --target=x86_64-unknown-linux-musl
        - cargo build --verbose --locked -p em-app -p get-certificate -p harmonize --target=x86_64-fortanix-unknown-sgx
        - ./doc/generate-api-docs.sh
